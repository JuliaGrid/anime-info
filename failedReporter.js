import path from 'path';

const colors = {
  reset: '\x1b[0m',
  gray: '\x1B[90m',
  red: '\x1B[91m',
  green: '\x1b[32m',
};

export default class CustomFailReporter {
  onRunComplete(_, results) {
    if (
      results.numFailedTests === 0 &&
      results.numRuntimeErrorTestSuites === 0
    ) {
      console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
      return;
    }

    console.log('\n‚ùå –£–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã:\n');

    results.testResults.forEach((testFile) => {
      const relativePath = path.relative(process.cwd(), testFile.testFilePath);

      // 1Ô∏è‚É£ –û—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è/–∫–æ–º–ø–∏–ª—è—Ü–∏–∏ (TS, SyntaxError –∏ —Ç.–¥.)
      if (testFile.testExecError) {
        const messageLine = testFile.testExecError.message
          ? testFile.testExecError.message.split('\n')[0].split('-')[1]
          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è';
        console.log(`üìÑ ${colors.gray}${relativePath}${colors.reset}`);
        console.log(`   ‚Ä¢ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞`);
        console.log(`     ‚Ü≥ ${messageLine}\n`);
      }

      // 2Ô∏è‚É£ –û–±—ã—á–Ω—ã–µ —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã
      const failedTests = testFile.testResults.filter(
        (t) => t.status === 'failed'
      );
      failedTests.forEach((test) => {
        const messageLine = test.failureMessages[0]
          ? test.failureMessages[0].split('\n')[0]
          : '–û—à–∏–±–∫–∞ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è';
        const splitedError = messageLine.split(':');
        const wordError =
          splitedError[0][0].toLowerCase() + splitedError[0].slice(1);
        const redWord = `${colors.red}${wordError}${colors.reset}`;
        const errorText = splitedError[1];
        console.log(`üìÑ ${colors.gray}${relativePath}${colors.reset}`);
        console.log(`   ‚Ä¢ ${test.fullName}`);
        console.log(`     ‚Ü≥  ${redWord}:${errorText}\n`);
      });
    });
  }
}
